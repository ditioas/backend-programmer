# LIST OF ENTITIES AND RELATIONSHIPS

1. users(user_id, user_name, email, password) 

2. projects(project_id, project_name, description, location) 

3. tasks(task_id, task_name, description, project_id)

4. resources(resource_id, resource_name)

5. companies(company_id, comapany_name)

6. admins(admin_id, admin_name)

7. user_works_for_company(user_id, company_id)

8. user_scheduled_for_project(user_id, project_id)

9. user_scheduled_for_resources(user_id, resource_id)

10. user_tasks(user_task_id, user_id, task_id, resource_id, check_in_time, check_out_time)


# DB QUERIES FOR A TYPICAL TRANSACTION AT DITIO:

Let's say we have a user in table users with following data,
(1234, "RAHUL", "RAHUL@GMAIL.COM", "HASH_PASSWORD")  

# User logins into the app.
1.  SELECT * 
    FROM users
    WHERE users.email == "RAHUL@GMAIL.COM" and password == "HASH_PASSWORD"

# User chooses a company.
2.  SELECT company_id, company_name
    FROM companies
    WHERE company_id IN (SELECT company_id
	                     FROM user_works_for_company
                         WHERE user_id == 1234)




#   If the assumption is correct and there is not an overlap between the project, task and resources
#   from one company to another. We have a natural partition happening in the tables. 
    
#   So for example, instead of having a single table project having project details of all the companies 
#   we can partition the table horizontally pulling out the data for each company into its separate tables
#   for each company. 

#   User chooses a company from the list of companies they work for, let say company_id = "company_123".
#   Now we have sharded the database on company_id i.e we have a separate database running for every
#   company having its own tables with from table numbers [2, 3, 4, 5, 6, 8, 9, 10]

#   we pick the database url to which the subsequent queries should hit, lets say we maintain a cache
#   server with redis having (key, value) = (company_id, database_server_url)
#   let say it looks like following,
#   company_database_map = {
        "ditioas" : "https://ditioas.mysql.database.azure.com",
        "company_123" : "https://company_123.mysql.database.azure.com",
        "vassabank" : "https://vassabank.mysql.database.azure.com",
    }
#   so the following queries will go to "https://company_123.mysql.database.azure.com".

# User gets a list of project which are scheduled for them and selects one project.
3.  SELECT project_name, description, location 
    FROM projects 
    WHERE project_id IN (SELECT project_id 
	                     FROM user_scheduled_for_project 
	                     WHERE user_id = 1234)

# User gets a list of resources which are scheduled for them and selects one resource.
4.  SELECT resource_id, resource_name
    FROM resources
    WHERE resource_id IN (SELECT resource_id
                          FROM user_scheduled_for_resources
                          WHERE user_id = 1234)

# Let say user chooses a project with project_id = "project_123" and resource with resource_id = "resource_123"
# User get a list of tasks belonging to the chosen project and chooses one task.
5.  SELECT tasks.task_id, tasks.task_name, tasks.description
    FROM tasks
    WHERE tasks.project_id = "project_123"
    AND tasks.task_id IN (
        SELECT user_scheduled_for_task.task_id
        FROM user_scheduled_for_task
        WHERE user_scheduled_for_task.user_id = 1234
    );


# Let say user chooses a task with task_id = "task_123"
# User clicks on check-in and records the check-in time.
6. UPDATE user_scheduled_for_task
   SET resource_id = "resource_123", checkin_time = '2023-01-25 09:00:00'
   WHERE user_id = 1234 AND task_id = "task_123"

# User clicks on check-out and records the check-out time.
7. UPDATE user_scheduled_for_task
   SET checkout_time = '2023-01-25 11:00:00'
   WHERE user_id = 1234 AND task_id = "task_123"




